@{
    Layout = "_AuthLayout";
    ViewData["Title"] = "Registration";
}

<style>
    .auth-page-center {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #ffff 0%, #ffff 100%);
        padding: 20px;
    }

    .auth-container {
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        max-width: 500px;
        width: 100%;
    }

    .auth-section {
        padding: 40px;
    }

    .auth-header h2 {
        color: #2c3e50;
        font-weight: 700;
        margin-bottom: 8px;
    }

    .auth-header p {
        color: #7f8c8d;
        font-size: 1.1rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        color: #2c3e50;
        font-weight: 600;
        margin-bottom: 8px;
        font-size: 1rem;
    }

    .form-control, .form-select {
        padding: 12px 15px;
        font-size: 1rem;
        border: 2px solid #e9ecef;
        border-radius: 10px;
        transition: all 0.3s ease;
        background: #f8f9fa;
    }

        .form-control:focus, .form-select:focus {
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            background: white;
        }

    .form-text {
        color: #6c757d;
        font-size: 0.85rem;
        margin-top: 6px;
        display: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, #3498db, #2980b9);
        border: none;
        padding: 15px 30px;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 12px;
        transition: all 0.3s ease;
        width: 100%;
    }

        .btn-primary:hover:not(:disabled) {
            background: linear-gradient(135deg, #2980b9, #3498db);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(52, 152, 219, 0.3);
        }

        .btn-primary:disabled {
            background: #6c757d;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

    .alert {
        border-radius: 12px;
        border: none;
        padding: 15px 20px;
    }

    .alert-danger {
        background: rgba(231, 76, 60, 0.1);
        color: #c0392b;
        border-left: 4px solid #e74c3c;
    }

    .auth-footer {
        border-top: 1px solid #e9ecef;
        padding-top: 20px;
        margin-top: 20px;
    }

        .auth-footer a {
            color: #3498db;
            font-weight: 600;
            text-decoration: none;
            transition: color 0.3s ease;
        }

            .auth-footer a:hover {
                color: #2980b9;
                text-decoration: underline;
            }

    /* Password Requirements Styling */
    .password-requirements {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        margin-top: 10px;
        border: 1px solid #e9ecef;
        display: none;
    }

        .password-requirements small {
            color: #6c757d;
            font-weight: 600;
        }

    .requirement-item {
        display: flex;
        align-items: center;
        margin: 8px 0;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

        .requirement-item i {
            width: 16px;
            text-align: center;
        }

    .confirm-feedback {
        font-size: 0.9rem;
        margin-top: 8px;
        display: none;
    }

    /* Show helper texts when active */
    .show-helper {
        display: block !important;
    }

    /* Success states */
    .text-success {
        color: #27ae60 !important;
        font-weight: 600;
    }

    .text-danger {
        color: #e74c3c !important;
        font-weight: 600;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .auth-container {
            margin: 10px;
            border-radius: 15px;
        }

        .auth-section {
            padding: 30px 25px;
        }
    }

    @@media (max-width: 576px) {
        .auth-page-center {
            padding: 10px;
        }

        .auth-section {
            padding: 25px 20px;
        }

        .form-control, .form-select {
            padding: 10px 12px;
        }

        .btn-primary {
            padding: 12px 25px;
        }
    }

    /* Loading animation */
    .btn-loading {
        position: relative;
        color: transparent;
    }

        .btn-loading::after {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            top: 50%;
            left: 50%;
            margin-left: -10px;
            margin-top: -10px;
            border: 2px solid #ffffff;
            border-radius: 50%;
            border-top-color: transparent;
            animation: spin 0.8s linear infinite;
        }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    /* Focus states for accessibility */
    .form-control:focus, .form-select:focus {
        outline: none;
    }

    /* Role selection styling */
    .form-select {
        cursor: pointer;
    }

        .form-select option {
            padding: 10px;
        }
</style>

<div class="auth-page-center">
    <div class="auth-container">
        <div class="auth-section">
            <div class="auth-header text-center mb-4">
                <h2 class="h3 fw-bold text-dark">Create Your Account</h2>
                <p class="text-muted">Join the Contract Monthly Claim System</p>
            </div>

            <form asp-controller="Home" asp-action="Register" method="post" id="registrationForm" novalidate>
                @Html.AntiForgeryToken()

                <!-- Full Name -->
                <div class="form-group">
                    <label for="fullName" class="form-label">Full Name</label>
                    <input type="text" name="name" id="fullName" class="form-control" placeholder="Enter your full name" required />
                    <div class="form-text">Enter your complete name</div>
                </div>

                <!-- Email -->
                <div class="form-group">
                    <label for="email" class="form-label">Email Address</label>
                    <input type="email" name="email" id="email" class="form-control" placeholder="Enter your email" required />
                    <div class="form-text">Use your email address</div>
                </div>

                <!-- Password -->
                <div class="form-group">
                    <label for="password" class="form-label">Password</label>
                    <input type="password" name="password" id="password" class="form-control" placeholder="Create a secure password" required minlength="8" />
                    <div class="password-requirements">
                        <small class="d-block mb-2">Your password must include:</small>
                        <div class="requirement-item" data-requirement="length">
                            <i class="fas fa-circle text-muted small me-2"></i>
                            <span>At least 8 characters</span>
                        </div>
                        <div class="requirement-item" data-requirement="uppercase">
                            <i class="fas fa-circle text-muted small me-2"></i>
                            <span>One uppercase letter (A-Z)</span>
                        </div>
                        <div class="requirement-item" data-requirement="lowercase">
                            <i class="fas fa-circle text-muted small me-2"></i>
                            <span>One lowercase letter (a-z)</span>
                        </div>
                        <div class="requirement-item" data-requirement="number">
                            <i class="fas fa-circle text-muted small me-2"></i>
                            <span>One number (0-9)</span>
                        </div>
                        <div class="requirement-item" data-requirement="special">
                            <i class="fas fa-circle text-muted small me-2"></i>
                            <span>One special character (!#$%^&* etc.)</span>
                        </div>
                    </div>
                </div>

                <!-- Confirm Password -->
                <div class="form-group">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <input type="password" name="ConfirmPassword" id="confirmPassword" class="form-control" placeholder="Re-enter your password" required />
                    <div class="confirm-feedback">
                        <small>Passwords must match</small>
                    </div>
                </div>

                <!-- Role -->
                <div class="form-group">
                    <label for="role" class="form-label">Select Your Role</label>
                    <select name="role" id="role" class="form-select" required>
                        <option value="">Choose your role:</option>
                        <option value="Lecturer">Lecturer</option>
                        <option value="Program Coordinator">Program Coordinator</option>
                        <option value="Academic Manager">Academic Manager</option>
                    </select>
                    <div class="form-text">Select the role that matches your position</div>
                </div>

                @if (ViewBag.Error != null)
                {
                    <div class="alert alert-danger d-flex align-items-center mb-3" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <div>@ViewBag.Error</div>
                    </div>
                }

                <button type="submit" class="btn btn-primary mb-3" id="submitBtn" disabled>
                    Create Account
                </button>
            </form>

            <div class="auth-footer text-center">
                <p class="text-muted mb-0">
                    Already have an account?
                    <a href="@Url.Action("Index", "Home")" class="fw-semibold">Sign in here</a>
                </p>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('registrationForm');
        const submitBtn = document.getElementById('submitBtn');

        const fullName = document.getElementById('fullName');
        const email = document.getElementById('email');
        const role = document.getElementById('role');
        const password = document.getElementById('password');
        const confirmPassword = document.getElementById('confirmPassword');

        const fullNameHelp = fullName.nextElementSibling;
        const emailHelp = email.nextElementSibling;
        const roleHelp = role.nextElementSibling;
        const passwordHelp = document.querySelector('.password-requirements');
        const confirmHelp = document.querySelector('.confirm-feedback');

        const requirementItems = document.querySelectorAll('.requirement-item');

        const requirements = {
            length: /.{8,}/,
            uppercase: /[A-Z]/,
            lowercase: /[a-z]/,
            number: /[0-9]/,
            special: /[!#$%^&*()_+\-=[\]{};':"\\|,.<>\/?]/
        };

        function validatePassword() {
            const val = password.value;
            let allValid = true;
            requirementItems.forEach(item => {
                const regex = requirements[item.dataset.requirement];
                const icon = item.querySelector('i');
                if (regex.test(val)) {
                    icon.className = 'fas fa-check-circle text-success small me-2';
                    item.classList.add('text-success');
                    item.classList.remove('text-muted');
                } else {
                    icon.className = 'fas fa-circle text-muted small me-2';
                    item.classList.remove('text-success');
                    item.classList.add('text-muted');
                    allValid = false;
                }
            });
            return allValid;
        }

        function validatePasswordMatch() {
            const text = confirmHelp.querySelector('small');
            if (!confirmPassword.value) {
                text.textContent = 'Passwords must match';
                text.className = 'text-muted';
                return false;
            } else if (password.value === confirmPassword.value) {
                text.textContent = 'Passwords match';
                text.className = 'text-success';
                return true;
            } else {
                text.textContent = 'Passwords do not match';
                text.className = 'text-danger';
                return false;
            }
        }

        function validateField(input, helper) {
            if (input.value.trim()) {
                helper.classList.add('show-helper');
            } else {
                helper.classList.remove('show-helper');
            }
        }

        function validateForm() {
            validateField(fullName, fullNameHelp);
            validateField(email, emailHelp);
            validateField(role, roleHelp);

            const passValid = validatePassword();
            const passMatch = validatePasswordMatch();

            if (password.value) {
                passwordHelp.classList.add('show-helper');
            } else {
                passwordHelp.classList.remove('show-helper');
            }

            if (confirmPassword.value) {
                confirmHelp.classList.add('show-helper');
            } else {
                confirmHelp.classList.remove('show-helper');
            }

            submitBtn.disabled = !(
                fullName.value.trim() &&
                email.value.trim() &&
                role.value &&
                passValid &&
                passMatch
            );
        }

        [fullName, email, role, password, confirmPassword].forEach(el => {
            el.addEventListener('input', validateForm);
            el.addEventListener('change', validateForm);
            el.addEventListener('focus', function() {
                const helper = this.nextElementSibling;
                if (helper && helper.classList.contains('form-text')) {
                    helper.classList.add('show-helper');
                }
            });
        });

        form.addEventListener('submit', function(e) {
            if (submitBtn.disabled) {
                e.preventDefault();
                alert('Please fix all validation errors before submitting.');
                validateForm();
            } else {
                submitBtn.classList.add('btn-loading');
                submitBtn.disabled = true;
            }
        });

        // Initial validation
        validateForm();
    });
</script>