@* 
*@

@using System.Linq
@using Contract_Monthly_Claim_System.Models

@{
    ViewData["Title"] = "Dashboard";
    
    var coordinatorClaims = ViewBag.CoordinatorClaims as IEnumerable<Claim> ?? Enumerable.Empty<Claim>();

}
<div class="container">

    <!-- Dashboard Welcome Section -->
    <div class="dashboard-welcome">
        <h1><i class="fas fa-file-contract"></i> Contract Monthly Claim System</h1>
        <p>Welcome to the Contract Monthly Claim System </p>
    </div>

    <!-- Role Switcher -->
    <div class="role-switcher">
        <label for="roleSwitch"><i class="fas fa-user-tag"></i> Switch Role:</label>
        <select id="roleSwitch" class="form-control">
            <option value="Lecturer">Lecturer</option>
            <option value="Program Coordinator">Program Coordinator</option>
            <option value="Academic Manager">Academic Manager </option>
        </select>
    </div>

   

    <hr class="mt-20" />

    <!-- Role Views Inline (only one visible at a time) -->
    <div id="lecturerView" class="role-view">
        <h3><i class="fas fa-chalkboard-teacher"></i> Lecturer Dashboard</h3>
        @await Html.PartialAsync("LectureDashboard", (IEnumerable<Claim>)ViewBag.LecturerClaims)
    </div>
    <div id="coordinatorView" class="role-view hidden">
        <h3><i class="fas fa-user-cog"></i> Coordinator Dashboard</h3>
        @* pass a non-null model to the partial *@
        @await Html.PartialAsync("CoordinatorDashboard", coordinatorClaims)
    </div>
    <div id="managerView" class="role-view hidden">
        <h3><i class="fas fa-briefcase"></i> Manager Dashboard</h3>
        @await Html.PartialAsync("ManagerDashboard", (IEnumerable<Claim>)ViewBag.ManagerClaims)
    </div>
</div>
<script>
    // Show role view based on selection
    function switchRoleView(role) {
        // Hide all role views
        document.querySelectorAll(".role-view").forEach(v => v.classList.add("hidden"));

        // Show selected role view
        if (role === "Lecturer") {
            document.getElementById("lecturerView").classList.remove("hidden");
        } else if (role === "Program Coordinator") {
            document.getElementById("coordinatorView").classList.remove("hidden");
        } else if (role === "Academic Manager") {
            document.getElementById("managerView").classList.remove("hidden");
        }
    }

    // Handle role switch change
    document.addEventListener('DOMContentLoaded', function() {
        const roleSwitch = document.getElementById('roleSwitch');

        roleSwitch.addEventListener('change', function() {
            const selectedRole = this.value;
            switchRoleView(selectedRole);
        });

        // Initialize with Lecturer view
        switchRoleView("Lecturer");
    });

    // Also make the function globally available for the inline onchange
    function onRoleChange() {
        const role = document.getElementById('roleSwitch').value;
        switchRoleView(role);
    }
</script>